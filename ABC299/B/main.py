#!/usr/bin/env python3
import sys
from typing import List

def solve(N: int, T: int, C: "List[int]", R: "List[int]"):
    # C の値ごとにグループを分ける
    color_groups = {}
    for i, (c, r) in enumerate(zip(C, R)):
        color_group = color_groups.get(c, [])
        color_group.append((i, r))
        color_groups[c] = color_group

    # T と同じグループがいるかどうかで分岐
    if T in color_groups:
        # T と同じグループがいる場合
        target_group = color_groups[T]
    else:
        # T と同じグループがいない場合、C[0] が target となる
        target_group = color_groups[C[0]]

    # グループの中で最大の r である番号を調べる
    max_data = max(target_group, key=lambda x: x[1])
    print(max_data[0]+1)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    R = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T, C, R)

if __name__ == '__main__':
    main()
