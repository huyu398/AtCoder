#!/usr/bin/env python3
import sys
from itertools import accumulate


def solve(N: int, A: "List[int]", Q: int, L: "List[int]", R: "List[int]"):
    cumulative_A = [0]
    for i, a in enumerate(A):
        cumulative_A.append(cumulative_A[i] + a)

    for l, r in zip(L, R):
        trial_count = r - (l-1)
        hit_count = cumulative_A[r] - cumulative_A[l-1]
        if   hit_count >  trial_count / 2:
            print('win')
        elif hit_count == trial_count / 2:
            print('draw')
        else:
            print('lose')

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    L = [int()] * (Q)  # type: "List[int]"
    R = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, A, Q, L, R)

if __name__ == '__main__':
    main()
