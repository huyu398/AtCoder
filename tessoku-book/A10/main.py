#!/usr/bin/env python3
import sys
from typing import List
from itertools import accumulate

import numpy as np

def solve(N: int, A: "List[int]", D: int, L: "List[int]", R: "List[int]"):
    # index が昇順での A の最大値を累積的に求める
    ascend_max_A = tuple(accumulate(A, func=max))
    # index が降順での A の最大値を累積的に求める
    descend_max_A = tuple(accumulate(A[::-1], func=max))[::-1]

    # L,R の各ペアを範囲外とした場合の A の最大値を求める
    for l, r in zip(L, R):
        # 範囲外を除いた A の最大値を求める
        max_A = max(ascend_max_A[l-2], descend_max_A[r])
        print(max_A)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    D = int(next(tokens))  # type: int
    L = [int()] * (D)  # type: "List[int]"
    R = [int()] * (D)  # type: "List[int]"
    for i in range(D):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, A, D, L, R)

if __name__ == '__main__':
    main()
