#!/usr/bin/env python3
import sys
from typing import List

import numpy as np

def solve(N: int, X: "List[int]", Y: "List[int]", Q: int, a: "List[int]", b: "List[int]", c: "List[int]", d: "List[int]"):
    MAX_SIZE = 1501
    # plane = [[0]*MAX_SIZE for _ in range(MAX_SIZE)]
    plane = np.zeros((MAX_SIZE, MAX_SIZE), dtype=int)
    for x, y in zip(X, Y):
        plane[x, y] += 1

    cumulative_plane = plane.cumsum(axis=0).cumsum(axis=1)
    # plane = np.zeros((MAX_SIZE, MAX_SIZE))
    # for i in range(1, MAX_SIZE):
    #     for j in range(1, MAX_SIZE):
    #         plane[i][j] = plane[i][j-1] + plane[i-1][j] + plane[i][j]
    # for i in range(1, MAX_SIZE):
    #     for j in range(1, MAX_SIZE):
    #         plane[i][j] = plane[i-1][j] + plane[i][j]

    # print('plane')
    # for p in plane:
    #     print(p)
    # print('cumulative_plane')
    # for p in cumulative_plane:
    #     print(p)

    for x1, y1, x2, y2 in zip(a, b, c, d):
        print(
            cumulative_plane[x1-1, y1-1]
                - cumulative_plane[x1-1, y2]
                - cumulative_plane[x2, y1-1]
                + cumulative_plane[x2, y2]
        )

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    a = [int()] * (Q)  # type: "List[int]"
    b = [int()] * (Q)  # type: "List[int]"
    c = [int()] * (Q)  # type: "List[int]"
    d = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, X, Y, Q, a, b, c, d)

if __name__ == '__main__':
    main()
