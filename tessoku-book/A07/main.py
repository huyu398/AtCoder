#!/usr/bin/env python3
import sys


def solve(D: int, N: int, L: "List[int]", R: "List[int]"):
    attendee_diffs = [0] * (D+1)
    for l, r in zip(L, R):
        attendee_diffs[l-1] += 1
        attendee_diffs[r] -= 1

    day_attendees = [0]
    for i, diff in enumerate(attendee_diffs):
        day_attendees.append(day_attendees[i] + diff)
    day_attendees.pop(0)
    day_attendees.pop()

    for attendees in day_attendees:
        print(attendees)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    L = [int()] * (N)  # type: "List[int]"
    R = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(D, N, L, R)

if __name__ == '__main__':
    main()
