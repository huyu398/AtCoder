#!/usr/bin/env python3
import sys
from typing import List

def solve(N: int, X: int, A: "List[int]"):
    # A を二分探索する
    # A の中で X 以上の最小の要素の index を求める
    # 二分探索の終了条件は、X が見つかったとき（X は必ず A に存在する）
    left = 0
    right = len(A)
    mid = (left + right) // 2
    while A[mid] != X:
        if A[mid] >= X:
            right = mid
        else:
            left = mid
        mid = (left + right) // 2

    print(mid + 1)

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)

if __name__ == '__main__':
    main()
