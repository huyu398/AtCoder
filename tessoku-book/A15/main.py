#!/usr/bin/env python3
import sys
from typing import List
import bisect

# 要素 a が配列 A の中で何番目に小さいかを二分探索で求める
def binary_search(A: "List[int]", a: int):
    index = bisect.bisect_left(A, a)
    return index

def solve(N: int, A: "List[int]"):
    # A を昇順にソートする
    sorted_A = sorted(set(A))
    # 圧縮した配列 B を求める
    B = [binary_search(sorted_A, a)+1 for a in A]
    print(*B)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
